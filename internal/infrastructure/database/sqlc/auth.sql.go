// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: auth.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name, last_name, email, password_hash, phone, user_type
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, first_name, last_name, email, phone, user_type, created_at, updated_at, last_login_at, is_active
`

type CreateUserParams struct {
	FirstName    string
	LastName     string
	Email        string
	PasswordHash string
	Phone        string
	UserType     string
}

type CreateUserRow struct {
	ID          int32
	FirstName   string
	LastName    string
	Email       string
	Phone       string
	UserType    string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	LastLoginAt pgtype.Timestamptz
	IsActive    pgtype.Bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.Phone,
		arg.UserType,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, password_hash, phone, user_type, created_at, updated_at, last_login_at, is_active
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLoginAt,
		&i.IsActive,
	)
	return i, err
}

const updateLastLoginAt = `-- name: UpdateLastLoginAt :exec
UPDATE users
SET last_login_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateLastLoginAt(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, updateLastLoginAt, id)
	return err
}
